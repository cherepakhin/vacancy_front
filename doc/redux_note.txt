https://it-dev-journal.ru/articles/chto-nuzhno-znat-o-redux-action-dispatch-reducer-store
vasi@vasi-note:~/prog/js/redux-first-app 

1.----------------------------------------------Reducer
Redux хранит состояние в дереве объектов (в state) внутри единого store (см. п.2).

====src/store/reducerTask.js
let state0 = [{ id: -1, title: '-----', completed: false}];

export default function reducerTask(state = state0, action) {
  switch (action.type) {
    case actions.TASK_ADD:
      // добавляет данные в state из action.payload
      return [...state, {
        id: ++lastId,
        title: action.payload.title,
        completed: false,
      }];
====

Единственная возможность изменить состояние - отправить action.

====src/store/actions.js
export const addTask = title => ({
  type: actions.TASK_ADD,
  payload: title
});
====


На этом пока все (пока нет визуальных элементов).

- Состояние(state) - только для чтения. 
  Нельзя менять его напрямую - только через action’ы (return [...state, action.payload]).
- Изменения делаются только при помощи чистых функций.
- Эти функции (редьюсеры) принимают в качестве аргумента 
	старое состояние (export const todoReducer = (state = [], action) => {)
  и возвращают НОВОЕ состояние (return [...state, action.payload]). И всегда при одних 
  и тех же данных результат этих функций будет одинаков .

2.----------------------------------------------Store

====src/store/store.js
        import { createStore } from 'redux';
import reducerTask from "./reducerTask";

const store = createStore(
  reducerTask,
  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
);

export default store;
====
 - Хранит состояние приложения (из редусеров).
 - Предоставляет доступ к состоянию через getState (state! хотя хранится в store!).
 - Позволяет изменять состояние через dispatch.
 - Регистрирует подписчиков через subscribe

dispatch позволяет изменять состояние, вызывая функцию dispatch, передав в нее action:

====src/components/AddNewTask.js
import * as actions from "../store/actions";
import { useDispatch } from "react-redux";


export default App() {
  const [taskTitle, setTaskTitle] = useState('');
  const dispatch = useDispatch();
 
  const handleTaskSubmit = () => {
    dispatch(actions.addTask({
      title: taskTitle
    }));
    setTaskTitle('');
  }
====

====src/store/actions.js
export const addTask = title => ({
  type: actions.TASK_ADD,
  payload: title
});
====

      <InputGroup.Append>
        <Button variant="outline-secondary" onClick={handleTaskSubmit}>Сохранить</Button>
      </InputGroup.Append>


===============Это из другого проекта с combineReducers
----------------------------------------------
Сделать rootReducer:

====reducers.js
import { combineReducers } from "redux"
import { todoReducer } from "./todo-reducer" // export const todoReducer = (state = [], action) => {
                                             //   switch (action.type) {
                                             //     case ADD_TODO: {
                                             //       return [...state, action.payload]
					     //     }

export const rootReducer = combineReducers({
  todos: todoReducer,
})

----------------------------------------------
Подключение к App:

import { createStore } from "redux" 
import { rootReducer } from "./reducers"

const store = createStore(rootReducer)
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
)

